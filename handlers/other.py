import random
from starter.load_jsons import adminid
from starter.loader import dp, bot
from buttons import markups as nav
from starter.other import Other, base, cur, is_number
from aiogram.fsm.context import FSMContext
from aiogram import types
from aiogram import F
from aiogram.filters import StateFilter
import datetime
import imgbbpy
import requests

@dp.message(F.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –∞—Ñ–∏—à—É')
async def addmp(message: types.Message):
    if int(message.from_user.id) != int(adminid()):
        mp = cur.execute(f'SELECT * FROM mps WHERE userid == ?', [message.from_user.id]).fetchone()
        if mp:
            mp = cur.execute(f'SELECT * FROM mps WHERE userid == ?', [message.from_user.id]).fetchall()[-1]
            data_check = datetime.datetime.now()
            elapsed_time = data_check - datetime.datetime.strptime(mp[12], "%Y-%m-%d %H:%M:%S.%f")
            if elapsed_time.total_seconds() >= 72 * 60 * 60:
                ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
                if ank:
                    cur.execute(f'DELETE FROM pre_mps WHERE userid == ?', [message.from_user.id])
                    base.commit()
                cur.execute('INSERT INTO pre_mps VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [message.from_user.id, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"])
                base.commit()
                await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                             '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons("-", "-", "-", "-", "-", "-", "-", "-", "-"))
                mess = await bot.send_message(message.from_user.id, "1", reply_markup=nav.crl())
                await bot.delete_message(message.from_user.id, mess.message_id)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            else:
                await bot.send_message(message.from_user.id, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ä–∞–∑ –≤ 3 –¥–Ω—è")
        else:
            ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
            if ank:
                cur.execute(f'DELETE FROM pre_mps WHERE userid == ?', [message.from_user.id])
                base.commit()
            cur.execute('INSERT INTO pre_mps VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [message.from_user.id, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"])
            base.commit()
            await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                         '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons("-", "-", "-", "-", "-", "-", "-", "-", "-"))
            mess = await bot.send_message(message.from_user.id, "1", reply_markup=nav.crl())
            await bot.delete_message(message.from_user.id, mess.message_id)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    else:
        ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
        if ank:
            cur.execute(f'DELETE FROM pre_mps WHERE userid == ?', [message.from_user.id])
            base.commit()
        cur.execute('INSERT INTO pre_mps VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [message.from_user.id, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"])
        base.commit()
        await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                     '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons("-", "-", "-", "-", "-", "-", "-", "-", "-"))
        mess = await bot.send_message(message.from_user.id, "1", reply_markup=nav.crl())
        await bot.delete_message(message.from_user.id, mess.message_id)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

@dp.callback_query(F.data == 'name')
async def name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ù–∞–∑–≤–∞–Ω–∏–µ * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º. –ù–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.', reply_markup=nav.back())
    await state.set_state(Other.name)

@dp.message(Other.name, F.text)
async def name(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.name)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE pre_mps SET name == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'name_ad')
async def name_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT name FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ù–∞–∑–≤–∞–Ω–∏–µ * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º. –ù–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back())
    await state.set_state(Other.name)

@dp.callback_query(F.data == 'date')
async def date(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –î–∞—Ç–∞/–≤—Ä–µ–º—è * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     f'–§–æ—Ä–º–∞—Ç —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á—á:–º–º\n\n'
                                     f'–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: 26.03.2024 15:30', reply_markup=nav.back())
    await state.set_state(Other.date)

@dp.message(Other.date, F.text)
async def date(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.date)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    try:
        datetime.datetime.strptime(message.text, '%d.%m.%Y %H:%M')
    except:
        await state.set_state(Other.date)
        return await bot.send_message(message.from_user.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"')
    await state.update_data(date_start = message.text)
    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=nav.pass_time())
    await state.set_state(Other.end_date)

@dp.callback_query(StateFilter("*"), F.data == 'pass_time')
async def pass_time(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cur.execute(f'UPDATE pre_mps SET date_start == ? WHERE userid == ?', [data["date_start"], callback.from_user.id])
    base.commit()
    await state.clear()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.message(Other.end_date, F.text)
async def end_date(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.end_date)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    try:
        datetime.datetime.strptime(message.text, '%d.%m.%Y %H:%M')
    except:
        await state.set_state(Other.end_date)
        return await bot.send_message(message.from_user.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"')
    data = await state.get_data()
    cur.execute(f'UPDATE pre_mps SET date_start == ? WHERE userid == ?', [data["date_start"], message.from_user.id])
    cur.execute(f'UPDATE pre_mps SET date_end == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    await state.clear()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'date_ad')
async def date_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    if ank[3] == "-":
        dt = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        dt = ank[3]
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –î–∞—Ç–∞/–≤—Ä–µ–º—è * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     f'–§–æ—Ä–º–∞—Ç —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á—á:–º–º\n\n'
                                     f'–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: 26.03.2024 15:30\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[2]}(–Ω–∞—á–∞–ª–æ) | {dt}(–∫–æ–Ω–µ—Ü)', reply_markup=nav.back())
    await state.set_state(Other.date)

@dp.callback_query(F.data == 'adres')
async def adres(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ê–¥—Ä–µ—Å * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     '–§–æ—Ä–º–∞—Ç —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: (–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç/–∫—É—Ä–æ—Ä—Ç), (—É–ª–∏—Ü–∞), (–Ω–æ–º–µ—Ä –¥–æ–º–∞), (–∫–≤–∞—Ä—Ç–∏—Ä–∞), (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ)\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, —É–ª. –ü—á–µ–ª–æ–≤–æ–¥–æ–≤, 23 (–ü–∞—Ä–∫ —à–∞–ª–µ)', reply_markup=nav.back())
    await state.set_state(Other.adres)

@dp.message(Other.adres, F.text)
async def adres(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.adres)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE pre_mps SET adress == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'adres_ad')
async def adres(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT adress FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ê–¥—Ä–µ—Å * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     '–§–æ—Ä–º–∞—Ç —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: (–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç/–∫—É—Ä–æ—Ä—Ç), (—É–ª–∏—Ü–∞), (–Ω–æ–º–µ—Ä –¥–æ–º–∞), (–∫–≤–∞—Ä—Ç–∏—Ä–∞), (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ)\n\n'
                                     f'–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, —É–ª. –ü—á–µ–ª–æ–≤–æ–¥–æ–≤, 23 (–ü–∞—Ä–∫ —à–∞–ª–µ)\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back())
    await state.set_state(Other.adres)

@dp.callback_query(F.data == 'who')
async def who(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ª–µ–∫—Ç–æ—Ä, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –¥—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç—ã.\n\n'
                                     '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—É–Ω–∫—Ç–∞ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –û–¥–Ω–∞–∫–æ ‚Äú–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç‚Äù –∏  –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ –ø—É–Ω–∫—Ç–µ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù.\n\n'
                                     '‚ùóÔ∏è–°—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                                     '–ò–≤–∞–Ω–æ–≤–∞ –ì–∞–ª–∏–Ω–∞, —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç–∞ 15 –ª–µ—Ç.\n'
                                     '–°—É—Ä–∫–æ–≤ –ú–∏—Ö–∞–∏–ª, –¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è', reply_markup=nav.back())
    await state.set_state(Other.who)

@dp.message(Other.who, F.text)
async def who(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.who)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE pre_mps SET who == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'who_ad')
async def who(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT who FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ª–µ–∫—Ç–æ—Ä, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –¥—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç—ã.\n\n'
                                     '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—É–Ω–∫—Ç–∞ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –û–¥–Ω–∞–∫–æ ‚Äú–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç‚Äù –∏  –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ –ø—É–Ω–∫—Ç–µ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù.\n\n'
                                     '‚ùóÔ∏è–°—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                                     '–ò–≤–∞–Ω–æ–≤–∞ –ì–∞–ª–∏–Ω–∞, —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç–∞ 15 –ª–µ—Ç.\n'
                                     '–°—É—Ä–∫–æ–≤ –ú–∏—Ö–∞–∏–ª, –¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back())
    await state.set_state(Other.who)

@dp.callback_query(F.data == 'descrip')
async def descrip(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –û–ø–∏—Å–∞–Ω–∏–µ * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–û–ø–∏—à–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º.\n\n'
                                     '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤—è–∑–∞–≤—à–∏—Å—å —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ.\n\n'
                                     '‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ä—ë–º—É —Ç–µ–∫—Å—Ç–∞ 1200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã).', reply_markup=nav.back())
    await state.set_state(Other.descrip)

@dp.message(Other.descrip, F.text)
async def descrip(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.descrip)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    if len(message.text) <= 1200:
        cur.execute(f'UPDATE pre_mps SET descrip == ? WHERE userid == ?', [message.text, message.from_user.id])
        base.commit()
        ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
        await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                     '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))
    else:
        await bot.send_message(message.from_user.id, "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—É—é –¥–ª–∏–Ω—É 1200 —Å–∏–º–≤–æ–ª–æ–≤(–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã)", reply_markup=nav.back())

@dp.callback_query(F.data == 'descrip_ad')
async def descrip_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT descrip FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –û–ø–∏—Å–∞–Ω–∏–µ * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–û–ø–∏—à–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º.\n\n'
                                     '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤—è–∑–∞–≤—à–∏—Å—å —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ.\n\n'
                                     '‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ä—ë–º—É —Ç–µ–∫—Å—Ç–∞ 1200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã).\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back())
    await state.set_state(Other.descrip)

@dp.callback_query(F.data == 'count')
async def count(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –¶–µ–Ω–∞.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.', reply_markup=nav.back())
    await state.set_state(Other.count)

@dp.message(Other.count, F.text)
async def count(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.count)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE pre_mps SET count == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'count_ad')
async def count_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT count FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –¶–µ–Ω–∞.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back())
    await state.set_state(Other.count)

@dp.callback_query(F.data == 'prim')
async def prim(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                                     '–£—á–∞—Å—Ç–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–ø–∏—Å–∏. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!\n\n'
                                     '–ï—Å–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù.\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å‚Äù, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ.', reply_markup=nav.ps())

@dp.callback_query(F.data == 'add')
async def add(callback: types.CallbackQuery):
    cur.execute(f'UPDATE pre_mps SET prim == ? WHERE userid == ?', ["–£—á–∞—Å—Ç–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–ø–∏—Å–∏. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!", callback.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'noadd')
async def add(callback: types.CallbackQuery):
    cur.execute(f'UPDATE pre_mps SET prim == ? WHERE userid == ?', ["-", callback.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'prim_ad')
async def prim(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                                     '–£—á–∞—Å—Ç–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–ø–∏—Å–∏. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!\n\n'
                                     '–ï—Å–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù.\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å‚Äù, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ.', reply_markup=nav.ps())

@dp.callback_query(F.data == 'photo')
async def photo_mess(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –§–æ—Ç–æ\n\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞—Ñ–∏—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É 1Ô∏è‚É£ —Ñ–æ—Ç–æ –∏–ª–∏ 1Ô∏è‚É£ –≤–∏–¥–µ–æ. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ  —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ 5 –º–±.\n'
                                     '‚ÄºÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫—É "–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", –∏–Ω–∞—á–µ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—Å—è.', reply_markup=nav.back())
    await state.set_state(Other.photo)

@dp.message(Other.photo, F.photo)
async def photo_mess(message: types.Message, state: FSMContext):
    await state.clear()
    await message.bot.download(message.photo[-1].file_id, f'media/{message.from_user.id}_photo.png')
    client = imgbbpy.AsyncClient('7e2b2dfe79bb308bba62728933231682')
    image = await client.upload(file=f'media/{message.from_user.id}_photo.png')
    cur.execute(f'UPDATE pre_mps SET photo == ? WHERE userid == ?', [image.url, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.message(Other.photo, F.video)
async def video_mess(message: types.Message, state: FSMContext):
    await state.clear()
    await bot.send_message(message.from_user.id, "–û–∂–∏–¥–∞–π—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")
    await message.bot.download(message.video.file_id, f'media/{message.from_user.id}_video.mp4')
    with open(f'media/{message.from_user.id}_video.mp4', 'rb') as photo:
        path = requests.post(
            "https://te.legra.ph/upload", files={"file": (f'file', photo, None)}
        ).json()
        try:
            link = "https://te.legra.ph" + path[0]["src"]
        except:
            link = path["error"]
            await state.set_state(Other.photo)
            return await bot.send_message(message.from_user.id, f'{link}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    cur.execute(f'UPDATE pre_mps SET photo == ? WHERE userid == ?', [link, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.message(Other.photo, F.document)
async def get_file(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                                                 "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω\n"
                                                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())

@dp.callback_query(F.data == 'photo_ad')
async def photo_mess(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT photo FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –§–æ—Ç–æ\n\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞—Ñ–∏—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É 1Ô∏è‚É£ —Ñ–æ—Ç–æ –∏–ª–∏ 1Ô∏è‚É£ –≤–∏–¥–µ–æ. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ  —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ 5 –º–±.\n'
                                     '‚ÄºÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫—É "–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", –∏–Ω–∞—á–µ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—Å—è.\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: <a href="{ank[0]}">„Ö§</a>', reply_markup=nav.back())
    await state.set_state(Other.photo)

@dp.callback_query(F.data == 'contact')
async def contact(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n\n'
                                     '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     '–í —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é. –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n\n'
                                     '–§–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: (–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º) (—Ç–µ–ª–µ—Ñ–æ–Ω) (–∏–º—è)\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: @shaman8888 +7(918)123-45-67 –ê–Ω—Ç–æ–Ω', reply_markup=nav.back())
    await state.set_state(Other.contact)

@dp.message(Other.contact, F.text)
async def contact(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.contact)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    if "@" not in message.text:
        await state.set_state(Other.contact)
        return await bot.send_message(message.from_user.id, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –¥–ª—è —Å–≤—è–∑–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE pre_mps SET contact == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'contact_ad')
async def contact_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT contact FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n\n'
                                     '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     '–í —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é. –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n\n'
                                     '–§–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: (–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º) (—Ç–µ–ª–µ—Ñ–æ–Ω) (–∏–º—è)\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: @shaman8888 +7(918)123-45-67 –ê–Ω—Ç–æ–Ω\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back())
    await state.set_state(Other.contact)

@dp.callback_query(F.data == 'show')
async def show(callback: types.CallbackQuery):
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    if ank[9] == "-":
        if ank[3] == "-":
            dt = ank[2]
        else:
            dt = f"{ank[2]} - {ank[3]}"
        mess = f"‚úÖ <b>{ank[1]}</b>\n‚è∞ {dt}\nüìç {ank[4]}\n"
        if ank[5] != "-":
            mess += f"üë§ {ank[5]}\n\n{ank[6]}\n\n"
        else:
            mess += f"\n{ank[6]}\n\n"
        if ank[7] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[7]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[10]}\n\n"
        if ank[8] != "-":
            mess += f"P.S. {ank[8]}\n\n"
        if callback.from_user.username != None:
            mess += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}"
        await callback.message.edit_text(mess, parse_mode='HTML', reply_markup=nav.back_show())
    else:
        if ank[3] == "-":
            dt = ank[2]
        else:
            dt = f"{ank[2]} - {ank[3]}"
        mess = f"‚úÖ <b>{ank[1]}</b>\n‚è∞ {dt}\nüìç {ank[4]}\n"
        if ank[5] != "-":
            mess += f"üë§ {ank[5]}\n\n{ank[6]}\n\n"
        else:
            mess += f"\n{ank[6]}\n\n"
        if ank[7] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[7]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[10]}\n\n"
        if ank[8] != "-":
            mess += f"P.S. {ank[8]}\n"
        if callback.from_user.username != None:
            mess += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}\n"
            mess += f'<a href="{ank[9]}">„Ö§</a>'
        else:
            mess += f'\n<a href="{ank[9]}">„Ö§</a>'
        await callback.message.edit_text(mess, parse_mode='HTML', reply_markup=nav.back_show())

@dp.callback_query(StateFilter("*"), F.data == 'back_ank')
async def back_ank(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    try:
        await callback.message.edit_text('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                         '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))
    except:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                         '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'back_show')
async def back_show(callback: types.CallbackQuery):
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    try:
        await callback.message.edit_text('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                         '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))
    except:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã.\n\n'
                                         '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=nav.addbuttons(ank[1], ank[2], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10]))

@dp.callback_query(F.data == 'cancel')
async def cancel(callback: types.CallbackQuery):
    cur.execute(f'DELETE FROM pre_mps WHERE userid == ?', [callback.from_user.id])
    base.commit()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.crl())

@dp.callback_query(F.data == 'send')
async def send(callback: types.CallbackQuery):
    ank = cur.execute(f'SELECT * FROM pre_mps WHERE userid == ?', [callback.from_user.id]).fetchone()
    id = random.randint(1111111111, 9999999999)
    data_check = datetime.datetime.now()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç", reply_markup=nav.crl())
    if ank[9] == "-":
        if ank[3] == "-":
            dt = ank[2]
        else:
            dt = f"{ank[2]} - {ank[3]}"
        mess = f"‚öôÔ∏è ID: {id}\n\n‚úÖ <b>{ank[1]}</b>\n‚è∞ {dt}\nüìç {ank[4]}\n"
        if ank[5] != "-":
            mess += f"üë§ {ank[5]}\n\n{ank[6]}\n\n"
        else:
            mess += f"\n{ank[6]}\n\n"
        if ank[7] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[7]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[10]}\n\n"
        if ank[8] != "-":
            mess += f"P.S. {ank[8]}\n\n"
        if callback.from_user.username != None:
            mess += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}"
        msg = await bot.send_message(-1002001083190, mess, parse_mode='HTML')
        cur.execute('INSERT INTO mps VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [id, callback.from_user.id, ank[1], ank[2], ank[3], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10], data_check, msg.message_id])
        base.commit()
        cur.execute(f'DELETE FROM pre_mps WHERE userid == ?', [callback.from_user.id])
        base.commit()
    else:
        if ank[3] == "-":
            dt = ank[2]
        else:
            dt = f"{ank[2]} - {ank[3]}"
        mess = f"‚öôÔ∏è ID: {id}\n\n‚úÖ <b>{ank[1]}</b>\n‚è∞ {dt}\nüìç {ank[4]}\n"
        if ank[5] != "-":
            mess += f"üë§ {ank[5]}\n\n{ank[6]}\n\n"
        else:
            mess += f"\n{ank[6]}\n\n"
        if ank[7] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[7]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[10]}\n\n"
        if ank[8] != "-":
            mess += f"P.S. {ank[8]}\n"
        if callback.from_user.username != None:
            mess += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}\n"
            mess += f'<a href="{ank[10]}">„Ö§</a>'
        else:
            mess += f'\n<a href="{ank[10]}">„Ö§</a>'
        msg = await bot.send_message(-1002001083190, mess, parse_mode='HTML')
        cur.execute('INSERT INTO mps VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [id, callback.from_user.id, ank[1], ank[2], ank[3], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10], data_check, msg.message_id])
        base.commit()
        cur.execute(f'DELETE FROM pre_mps WHERE userid == ?', [callback.from_user.id])
        base.commit()

@dp.message(F.text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
async def editmp(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ id –æ–±—å—è–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    await state.set_state(Other.editmpid)

@dp.message(Other.editmpid, F.text)
async def editmpid(message: types.Message, state: FSMContext):
    await state.clear()
    if is_number(message.text):
        ank = cur.execute(f'SELECT * FROM mps WHERE id == ?', [message.text]).fetchone()
        if ank:
            if int(ank[1]) != int(message.from_user.id) and int(message.from_user.id) != int(adminid()):
                await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ")
            else:
                edt = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
                if edt:
                    cur.execute(f'DELETE FROM mps_edit WHERE userid == ?', [message.from_user.id])
                    base.commit()
                cur.execute('INSERT INTO mps_edit VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [ank[0], message.from_user.id, ank[2], ank[3], ank[4], ank[5], ank[6], ank[7], ank[8], ank[9], ank[10], ank[11], ank[13]])
                base.commit()
                await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))
                mess = await bot.send_message(message.from_user.id, "1", reply_markup=nav.crl())
                await bot.delete_message(message.from_user.id, mess.message_id)  # —É–¥–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        else:
            await bot.send_message(message.from_user.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        await bot.send_message(message.from_user.id, "–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ")

@dp.callback_query(F.data == 'name_edit')
async def name(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT name FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ù–∞–∑–≤–∞–Ω–∏–µ * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º. –ù–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back_edit())
    await state.set_state(Other.name_edit)

@dp.message(Other.name_edit, F.text)
async def name(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.name_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE mps_edit SET name == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'date_edit')
async def date(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    if ank[4] == "-":
        dt = "–ù–µ —É–∫–∞–∑–∞–Ω–Ω–æ"
    else:
        dt = ank[4]
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –î–∞—Ç–∞/–≤—Ä–µ–º—è * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     f'–§–æ—Ä–º–∞—Ç —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á—á:–º–º\n\n'
                                     f'–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: 26.03.2024 15:30\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[3]}(–Ω–∞—á–∞–ª–æ) | {dt}(–∫–æ–Ω–µ—Ü)', reply_markup=nav.back_edit())
    await state.set_state(Other.date_edit)

@dp.message(Other.date_edit, F.text)
async def date(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.date_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    try:
        datetime.datetime.strptime(message.text, '%d.%m.%Y %H:%M')
    except:
        await state.set_state(Other.date)
        return await bot.send_message(message.from_user.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"')
    await state.update_data(date_start = message.text)
    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=nav.pass_time_edt())
    await state.set_state(Other.end_date_edit)

@dp.callback_query(StateFilter("*"), F.data == 'pass_time_edt')
async def pass_time_edt(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cur.execute(f'UPDATE mps_edit SET date_start == ? WHERE userid == ?', [data["date_start"], callback.from_user.id])
    cur.execute(f'UPDATE mps_edit SET date_end == ? WHERE userid == ?', ["-", callback.from_user.id])
    base.commit()
    await state.clear()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.message(Other.end_date_edit, F.text)
async def end_date(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.end_date_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    try:
        datetime.datetime.strptime(message.text, '%d.%m.%Y %H:%M')
    except:
        await state.set_state(Other.end_date_edit)
        return await bot.send_message(message.from_user.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"')
    data = await state.get_data()
    cur.execute(f'UPDATE mps_edit SET date_start == ? WHERE userid == ?', [data["date_start"], message.from_user.id])
    cur.execute(f'UPDATE mps_edit SET date_end == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    await state.clear()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'adres_edit')
async def adres(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT adress FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ê–¥—Ä–µ—Å * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     '–§–æ—Ä–º–∞—Ç —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: (–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç/–∫—É—Ä–æ—Ä—Ç), (—É–ª–∏—Ü–∞), (–Ω–æ–º–µ—Ä –¥–æ–º–∞), (–∫–≤–∞—Ä—Ç–∏—Ä–∞), (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ)\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, —É–ª. –ü—á–µ–ª–æ–≤–æ–¥–æ–≤, 23 (–ü–∞—Ä–∫ —à–∞–ª–µ)\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back_edit())
    await state.set_state(Other.adres_edit)

@dp.message(Other.adres_edit, F.text)
async def adres(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.adres_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE mps_edit SET adress == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'who_edit')
async def who(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ª–µ–∫—Ç–æ—Ä, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –¥—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç—ã.\n\n'
                                     '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—É–Ω–∫—Ç–∞ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –û–¥–Ω–∞–∫–æ ‚Äú–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç‚Äù –∏  –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ –ø—É–Ω–∫—Ç–µ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù.\n\n'
                                     '‚ùóÔ∏è–°—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                                     '–ò–≤–∞–Ω–æ–≤–∞ –ì–∞–ª–∏–Ω–∞, —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç–∞ 15 –ª–µ—Ç.\n'
                                     '–°—É—Ä–∫–æ–≤ –ú–∏—Ö–∞–∏–ª, –¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è\n\n', reply_markup=nav.back_edit())
    await state.set_state(Other.who_edit)

@dp.message(Other.who_edit, F.text)
async def who(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.who_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE mps_edit SET who == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'who_edit_ad')
async def who(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT who FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ª–µ–∫—Ç–æ—Ä, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –¥—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç—ã.\n\n'
                                     '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—É–Ω–∫—Ç–∞ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –û–¥–Ω–∞–∫–æ ‚Äú–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç‚Äù –∏  –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ –ø—É–Ω–∫—Ç–µ ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç—ã‚Äù.\n\n'
                                     '‚ùóÔ∏è–°—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                                     '–ò–≤–∞–Ω–æ–≤–∞ –ì–∞–ª–∏–Ω–∞, —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç–∞ 15 –ª–µ—Ç.\n'
                                     '–°—É—Ä–∫–æ–≤ –ú–∏—Ö–∞–∏–ª, –¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤\n\n'
                                     '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚è™ –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back_edit())
    await state.set_state(Other.who_edit)

@dp.callback_query(F.data == 'descrip_edit')
async def descrip_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT descrip FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –û–ø–∏—Å–∞–Ω–∏–µ * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n"
                                     '–û–ø–∏—à–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º.\n\n'
                                     '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤—è–∑–∞–≤—à–∏—Å—å —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ.\n\n'
                                     '‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ä—ë–º—É —Ç–µ–∫—Å—Ç–∞ 1200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã).\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back_edit())
    await state.set_state(Other.descrip_edit)

@dp.message(Other.descrip_edit, F.text)
async def descrip(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.descrip_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    if len(message.text) <= 1200:
        cur.execute(f'UPDATE mps_edit SET descrip == ? WHERE userid == ?', [message.text, message.from_user.id])
        base.commit()
        ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))
    else:
        await bot.send_message(message.from_user.id, "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—É—é –¥–ª–∏–Ω–Ω—É 1200 —Å–∏–º–≤–æ–ª–æ–≤(–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã)", reply_markup=nav.back_edit())

@dp.callback_query(F.data == 'count_edit')
async def count(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –¶–µ–Ω–∞.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.', reply_markup=nav.back_edit())
    await state.set_state(Other.count_edit)

@dp.message(Other.count_edit, F.text)
async def count(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.count_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    await state.clear()
    cur.execute(f'UPDATE mps_edit SET count == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'count_edit_ad')
async def count_ad(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT count FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text("üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –¶–µ–Ω–∞.\n"
                                     '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back_edit())
    await state.set_state(Other.count_edit)

@dp.callback_query(F.data == 'prim_edit')
async def prim(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                                     '–£—á–∞—Å—Ç–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–ø–∏—Å–∏. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!\n\n'
                                     '–ï—Å–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù.\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å‚Äù, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ.', reply_markup=nav.ps_edit())

@dp.callback_query(F.data == 'add_edit')
async def add(callback: types.CallbackQuery):
    cur.execute(f'UPDATE mps_edit SET prim == ? WHERE userid == ?', ["–£—á–∞—Å—Ç–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–ø–∏—Å–∏. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!", callback.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'noadd_edit')
async def add(callback: types.CallbackQuery):
    cur.execute(f'UPDATE mps_edit SET prim == ? WHERE userid == ?', ["-", callback.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'prim_edit_ad')
async def prim(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                                     '–£—á–∞—Å—Ç–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–ø–∏—Å–∏. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!\n\n'
                                     '–ï—Å–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù.\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å‚Äù, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ.', reply_markup=nav.ps_edit())

@dp.callback_query(F.data == 'contact_edit')
async def contact(callback: types.CallbackQuery, state: FSMContext):
    ank = cur.execute(f'SELECT contact FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    await callback.message.edit_text('üîÑ –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).\n\n'
                                     '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.\n\n'
                                     '–í —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é. –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n\n'
                                     '–§–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: (–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º) (—Ç–µ–ª–µ—Ñ–æ–Ω) (–∏–º—è)\n\n'
                                     '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: @shaman8888 +7(918)123-45-67 –ê–Ω—Ç–æ–Ω\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {ank[0]}', reply_markup=nav.back_edit())
    await state.set_state(Other.contact_edit)

@dp.message(Other.contact_edit, F.text)
async def contact(message: types.Message, state: FSMContext):
    if "http" in message.text or "https" in message.text:
        await state.set_state(Other.contact_edit)
        return await bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚è™ –ù–∞–∑–∞–¥"', reply_markup=nav.back())
    if "@" not in message.text:
        await state.set_state(Other.contact_edit)
        return await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –¥–ª—è —Å–≤—è–∑–∏")
    await state.clear()
    cur.execute(f'UPDATE prim_edit SET contact == ? WHERE userid == ?', [message.text, message.from_user.id])
    base.commit()
    ank = cur.execute(f'SELECT * FROM prim_edit WHERE userid == ?', [message.from_user.id]).fetchone()
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'show_edit')
async def show(callback: types.CallbackQuery):
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    if ank[10] == "-":
        if ank[4] == "-":
            dt = ank[3]
        else:
            dt = f"{ank[3]} - {ank[4]}"
        mess = f"‚öôÔ∏è ID: {ank[0]}\n\n‚úÖ <b>{ank[2]}</b>\n‚è∞ {dt}\nüìç {ank[5]}\n"
        if ank[6] != "-":
            mess += f"üë§ {ank[6]}\n\n{ank[7]}\n\n"
        else:
            mess += f"\n{ank[7]}\n\n"
        if ank[8] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[8]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[11]}\n\n"
        if ank[9] != "-":
            mess += f"P.S. {ank[9]}\n\n"
        if callback.from_user.username != None:
            mess += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}"
        await callback.message.edit_text(mess, parse_mode='HTML', reply_markup=nav.back_show_edit())
    else:
        if ank[4] == "-":
            dt = ank[3]
        else:
            dt = f"{ank[3]} - {ank[4]}"
        mess = f"‚öôÔ∏è ID: {ank[0]}\n\n‚úÖ <b>{ank[2]}</b>\n‚è∞ {dt}\nüìç {ank[5]}\n"
        if ank[6] != "-":
            mess += f"üë§ {ank[6]}\n\n{ank[7]}\n\n"
        else:
            mess += f"\n{ank[7]}\n\n"
        if ank[8] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[8]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[11]}\n\n"
        if ank[9] != "-":
            mess += f"P.S. {ank[9]}\n"
        if callback.from_user.username != None:
            mess += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}\n"
            mess += f'<a href="{ank[10]}">„Ö§</a>'
        else:
            mess += f'\n<a href="{ank[10]}">„Ö§</a>'
        await callback.message.edit_text(mess, parse_mode='HTML', reply_markup=nav.back_show_edit())

@dp.callback_query(StateFilter("*"), F.data == 'back_ank_edit')
async def back_ank(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    try:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))
    except:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'back_show_edit')
async def back_show(callback: types.CallbackQuery):
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    try:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))
    except:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=nav.editbuttons(ank[2], ank[3], ank[5], ank[6], ank[7], ank[8], ank[9], ank[11]))

@dp.callback_query(F.data == 'cancel_edit')
async def cancel(callback: types.CallbackQuery):
    cur.execute(f'DELETE FROM mps_edit WHERE userid == ?', [callback.from_user.id])
    base.commit()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.crl())

@dp.callback_query(F.data == 'send_edit')
async def send_edit(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", reply_markup=nav.crl())
    ank = cur.execute(f'SELECT * FROM mps_edit WHERE userid == ?', [callback.from_user.id]).fetchone()
    if ank[10] == "-":
        if ank[4] == "-":
            dt = ank[3]
        else:
            dt = f"{ank[3]} - {ank[4]}"
        mess = f"‚öôÔ∏è ID: {ank[0]}\n\n‚úÖ <b>{ank[2]}</b>\n‚è∞ {dt}\nüìç {ank[5]}\n"
        if ank[6] != "-":
            mess += f"üë§ {ank[6]}\n\n{ank[7]}\n\n"
        else:
            mess += f"\n{ank[7]}\n\n"
        if ank[8] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[8]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[11]}\n\n"
        if ank[9] != "-":
            mess += f"P.S. {ank[9]}\n\n"
        if callback.from_user.username != None:
            mess += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}"
        await bot.edit_message_text(mess, mpchanelid, ank[12], parse_mode='HTML')
        cur.execute(f'UPDATE mps SET name == ? WHERE id == ?', [ank[2], ank[0]])
        cur.execute(f'UPDATE mps SET date_start == ? WHERE id == ?', [ank[3], ank[0]])
        cur.execute(f'UPDATE mps SET date_end == ? WHERE id == ?', [ank[4], ank[0]])
        cur.execute(f'UPDATE mps SET adress == ? WHERE id == ?', [ank[5], ank[0]])
        cur.execute(f'UPDATE mps SET who == ? WHERE id == ?', [ank[6], ank[0]])
        cur.execute(f'UPDATE mps SET descrip == ? WHERE id == ?', [ank[7], ank[0]])
        cur.execute(f'UPDATE mps SET count == ? WHERE id == ?', [ank[8], ank[0]])
        cur.execute(f'UPDATE mps SET prim == ? WHERE id == ?', [ank[9], ank[0]])
        cur.execute(f'UPDATE mps SET contact == ? WHERE id == ?', [ank[11], ank[0]])
        base.commit()
        cur.execute(f'DELETE FROM mps_edit WHERE userid == ?', [callback.from_user.id])
        base.commit()
    else:
        if ank[4] == "-":
            dt = ank[3]
        else:
            dt = f"{ank[3]} - {ank[4]}"
        mess = f"‚öôÔ∏è ID: {ank[0]}\n\n‚úÖ <b>{ank[2]}</b>\n‚è∞ {dt}\nüìç {ank[5]}\n"
        if ank[6] != "-":
            mess += f"üë§ {ank[6]}\n\n{ank[7]}\n\n"
        else:
            mess += f"\n{ank[7]}\n\n"
        if ank[8] != "-":
            mess += f"üí∏ –¶–µ–Ω–∞: {ank[8]}\n\n"
        mess += f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {ank[11]}\n\n"
        if ank[9] != "-":
            mess += f"P.S. {ank[9]}\n"
        if callback.from_user.username != None:
            mess += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{callback.from_user.username}\n"
            mess += f'<a href="{ank[10]}">„Ö§</a>'
        else:
            mess += f'\n<a href="{ank[10]}">„Ö§</a>'
        await bot.edit_message_text(mess, mpchanelid, ank[12], parse_mode='HTML')
    cur.execute(f'UPDATE mps SET name == ? WHERE id == ?', [ank[2], ank[0]])
    cur.execute(f'UPDATE mps SET date_start == ? WHERE id == ?', [ank[3], ank[0]])
    cur.execute(f'UPDATE mps SET date_end == ? WHERE id == ?', [ank[4], ank[0]])
    cur.execute(f'UPDATE mps SET adress == ? WHERE id == ?', [ank[5], ank[0]])
    cur.execute(f'UPDATE mps SET who == ? WHERE id == ?', [ank[6], ank[0]])
    cur.execute(f'UPDATE mps SET descrip == ? WHERE id == ?', [ank[7], ank[0]])
    cur.execute(f'UPDATE mps SET count == ? WHERE id == ?', [ank[8], ank[0]])
    cur.execute(f'UPDATE mps SET prim == ? WHERE id == ?', [ank[9], ank[0]])
    cur.execute(f'UPDATE mps SET contact == ? WHERE id == ?', [ank[11], ank[0]])
    base.commit()
    cur.execute(f'DELETE FROM mps_edit WHERE userid == ?', [callback.from_user.id])
    base.commit()

@dp.message(F.text.lower() == '—É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
async def editmp(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ id –æ–±—å—è–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    mess = await bot.send_message(message.from_user.id, "1", reply_markup=nav.crl())
    await bot.delete_message(message.from_user.id, mess.message_id)  # —É–¥–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await state.set_state(Other.deletempid)

@dp.message(Other.deletempid, F.text)
async def deletempid(message: types.Message, state: FSMContext):
    await state.clear()
    if is_number(message.text):
        ank = cur.execute(f'SELECT * FROM mps WHERE id == ?', [message.text]).fetchone()
        if ank:
            if int(ank[1]) != int(message.from_user.id) and int(message.from_user.id) != int(adminid()):
                await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ")
            else:
                await bot.delete_message(mpchanelid, ank[13])
                cur.execute(f'DELETE FROM mps WHERE id == ?', [message.text])
                base.commit()
                await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

@dp.message(F.text.lower() == '–ø–æ–º–æ—â—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def supp(message: types.Message):
    await bot.send_message(message.from_user.id, "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∞—Ñ–∏—à—É,—Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @shaman8888")